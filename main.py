import streamlit as st
from datetime import date

import yfinance as yf
from prophet import Prophet
from prophet.plot import plot_plotly
from plotly import graph_objs as go

# streamlit run main.py
# Set up title and sidebar
st.title('üíÄ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏êüè¥‚Äç‚ò†Ô∏è')
st.sidebar.header('‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô')

# User input for stock symbol and years of prediction
selected_stock = st.sidebar.text_input('‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô, GOOG, AAPL, MSFT, NVDA):')
n_years = st.sidebar.slider('‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:', 1, 4)

# Date ranges
START = "2015-01-01"
TODAY = date.today().strftime("%Y-%m-%d")
period = n_years * 365

# Function to load data
@st.cache_data
def load_data(ticker):
    data = yf.download(ticker, START, TODAY)
    data.reset_index(inplace=True)
    return data

# Load data
data_load_state = st.text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')
data = load_data(selected_stock)
data_load_state.text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•... ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')

# Display raw data
st.subheader(f'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á {selected_stock}')
st.write(data.tail())

# Function to plot raw data
def plot_raw_data():
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=data['Date'], y=data['Open'], name="Opening Price", line=dict(color='royalblue')))
    fig.add_trace(go.Scatter(x=data['Date'], y=data['Close'], name="Closing Price", line=dict(color='firebrick')))
    fig.layout.update(title_text='Time Series Data', xaxis_rangeslider_visible=True)
    st.plotly_chart(fig)

# Display raw data plot
st.subheader('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏õ‡∏¥‡∏î - ‡∏õ‡∏¥‡∏îüõíüìàüìâ')
plot_raw_data()

# Predict forecast with Prophet
df_train = data[['Date','Close']]
df_train = df_train.rename(columns={"Date": "ds", "Close": "y"})

m = Prophet()
m.fit(df_train)
future = m.make_future_dataframe(periods=period)
forecast = m.predict(future)

# Display forecast data
st.subheader('‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô')
st.write(forecast.tail())

# Display forecast plot
st.subheader(f'‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {n_years} ‡∏õ‡∏µ')
fig1 = plot_plotly(m, forecast )
fig1.update_traces(line=dict(color='orange'))  # Forecast line color
st.plotly_chart(fig1)

# Display forecast components
st.subheader('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤')
fig2 = m.plot_components(forecast)
st.write(fig2)
